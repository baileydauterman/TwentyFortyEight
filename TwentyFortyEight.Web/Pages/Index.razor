@page "/"

<PageTitle>2048</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-2">
            <div class="vstack gap-1">
                <span>
                    Last Move: @(GameBoard?.Score)
                </span>

                <span>
                    Highest Score: @(GameBoard?.HighestNumber)
                </span>

                <span>
                    Target: @(GameBoard?.Target)
                </span>

                <span>
                    Last Move: @(LastMove)
                </span>

                <div class="input-group mb-3">
                    <span class="input-group-text" id="inputGroup-sizing-default">Board Size</span>
                    <input type="text" class="form-control" aria-describedby="inputGroup-sizing-default" @bind=@boardSize @oninput=ValidateBoardSize>
                </div>
            </div>
        </div>
        <div @ref="gameAreaRef" class="col" tabindex="0" @onkeydown="@HandleKeyPress">
            @{
                for (var i = 0; i < GameBoard?.Dimension; i++)
                {
                    <div class="hstack gap-1">
                        @{
                            foreach (var cell in GameBoard.GetRow(i))
                            {
                                var classValue = cell.Value == 0 ? $"{_cellStyling} text-secondary" : _cellStyling;
                                <span class=@classValue style="background: @(BackgroundColors[cell.Value])">
                                    @cell.Value
                                </span>
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>


@code {
    public Board? GameBoard = null;

    public string LastMove = string.Empty;

    private Queue<BoardMove> _queuedMoves = new Queue<BoardMove>();

    private bool _isDequeing = false;

    private ElementReference gameAreaRef;

    private int boardSize = 4;

    private const string _cellStyling = "p-2 fs-4 font-monospace";

    protected override Task OnInitializedAsync()
    {
        GameBoard = new Board(boardSize);
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gameAreaRef.FocusAsync();
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (GameBoard is null)
        {
            return;
        }

        if (e.Key.TryConvertWebKeyToBoardMoveType(out var moveType))
        {
            _queuedMoves.Enqueue(moveType);

            if (!_isDequeing)
            {
                HandledQueuedInput();
            }
        }
    }

    private async void HandledQueuedInput()
    {
        _isDequeing = true;

        while (true)
        {
            if (_queuedMoves.TryDequeue(out var move))
            {
                GameBoard?.Move(move);
                LastMove = move.ToString();
            }
            else
            {
                break;
            }
        }

        _isDequeing = false;
    }

    private void ValidateBoardSize(ChangeEventArgs e)
    {
        var updated = false;
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            boardSize = 4;
            updated = true;
        }

        if (int.TryParse(e.Value?.ToString(), out boardSize))
        {
            updated = true;
        }
        
        if (updated)
        {
            GameBoard = new Board(boardSize);
            InvokeAsync(() => StateHasChanged());

        }
    }

    private static readonly Dictionary<int, string> BackgroundColors = new Dictionary<int, string>()
{
        { 0, "#1d1f20" },
        { 2, "#C5E6A6" },
        { 2 << 1, "#BDD2A6" },
        { 2 << 2, "#B9BEA5" },
        { 2 << 3, "#A7AAA4" },
        { 2 << 4, "#9899A6" },
        { 2 << 5, "#c8c8c8" },
        { 2 << 6, "#C5E6A6" },
        { 2 << 7, "#BDD2A6" },
        { 2 << 8, "#B9BEA5" },
        { 2 << 9, "#A7AAA4" },
        { 2 << 10, "#9899A6" },
        { 2 << 11, "#c8c8c8" },
        { 2 << 12, "#C5E6A6" },
        { 2 << 13, "#BDD2A6" },
        { 2 << 14, "#B9BEA5" },
        { 2 << 15, "#A7AAA4" },
        { 2 << 16, "#9899A6" },
        { 2 << 17, "#c8c8c8" },
        { 2 << 18, "#C5E6A6" },
        { 2 << 19, "#BDD2A6" },
        { 2 << 20, "#B9BEA5" },
        { 2 << 21, "#A7AAA4" },
        { 2 << 22, "#9899A6" },
    };
}