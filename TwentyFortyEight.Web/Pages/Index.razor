@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStorage;

<PageTitle>2048</PageTitle>

<div class="@containerClass">
    <div class="row">
        <div class="col-6">
            <div class="hstack gap-2">
                <div class="vstack">
                    <span class="fw-bold font-monospace">
                        Score
                    </span>
                    <span class="font-monospace">
                        @(GameBoard?.Score)
                    </span>
                </div>

                <div class="vstack">
                    <span class="fw-bold font-monospace">
                        Highest Score
                    </span>
                    <span class="font-monospace">
                        @(GameBoard?.HighestNumber)
                    </span>
                </div>

                <div class="vstack">
                    <span class="fw-bold font-monospace">
                        Target
                    </span>
                    <span class="font-monospace">
                        @(GameBoard?.Target)
                    </span>
                </div>

                <div class="vstack">
                    <span class="fw-bold font-monospace">
                        Last Move
                    </span>
                    <span class="font-monospace">
                        @(LastMove)
                    </span>
                </div>

                <div class="form-floating">
                    <input type="text" class="form-control" aria-describedby="inputGroup-sizing-default" @bind=@boardSize disabled>
                    <label for="inputGroup-sizing-default">Board Size</label>
                    <input type="range" class="form-range" min="4" max="16" id="customRange2" value="@boardSize" @onchange=ValidateBoardSize>
                </div>

                <button type="button" class="btn btn-secondary" @onclick=Reset>Reset</button>
            </div>
        </div>
        <div class="h-100 d-flex align-items-center justify-content-center p-48">
            <div class="row">
                <div @ref="gameAreaRef" class="col p-2" tabindex="0" @onkeydown="@HandleKeyPress">
                    @{
                        for (var i = 0; i < GameBoard?.Dimension; i++)
                        {
                            <div class="hstack gap-1 pb-1">
                                @{
                                    foreach (var cell in GameBoard.GetRow(i))
                                    {
                                        var classValue = cell.Value == 0 ? $"{_cellStyling} text-secondary" : $"{_cellStyling} text-dark";
                                        <div class="@classValue" style="background: @(BackgroundColors[cell.Value]); width: 107px; height: 107px; font-size: @(FontSize[cell.Value]); border-radius: 8px;">
                                            <span class="pt-2">
                                                @cell.Value
                                            </span>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>@modalBody</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Restart</button>
                    <button type="button" class="btn btn-primary">Continue Playing</button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    public Board? GameBoard = null;

    public string LastMove = string.Empty;

    private ElementReference gameAreaRef;

    private int boardSize = 4;

    private const string _cellStyling = "font-monospace text-center align-middle";

    private string modalTitle => GetModalTitle();

    private string modalBody => GetModalBody();

    private string containerClass => GameBoard is null ? "container visually-hidden" : "container";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await gameAreaRef.FocusAsync();
            var state = await ProtectedLocalStorage.GetAsync<SaveState>(_localStorageKey);

            if (state.Success && state.Value is not null)
            {
                GameBoard = new Board(state.Value);
            }
            else
            {
                GameBoard = new Board(boardSize);
            }

            boardSize = GameBoard.Dimension;
            UpdateState(true);
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (GameBoard is null)
        {
            return;
        }

        if (e.Key.TryConvertWebKeyToBoardMoveType(out var move))
        {
            GameBoard?.Move(move);
            UpdateState(false);
            LastMove = move.ToString();
        }
    }

    private void ValidateBoardSize(ChangeEventArgs e)
    {
        var updated = false;
        if (string.IsNullOrWhiteSpace(e.Value?.ToString()))
        {
            boardSize = 4;
            return;
        }

        if (int.TryParse(e.Value?.ToString(), out boardSize))
        {
            updated = true;
        }

        if (updated)
        {
            GameBoard = new Board(boardSize);
            UpdateState(true);
        }
    }

    private void UpdateState(bool statehaschanged = false)
    {
        if (GameBoard is null)
        {
            return;
        }

        InvokeAsync(() =>
        {
            ProtectedLocalStorage.SetAsync(_localStorageKey, GameBoard.Save());

            if (statehaschanged)
            {
                StateHasChanged();
            }
        });
    }

    private void Reset()
    {
        GameBoard = new Board(4);
        boardSize = 4;
        ProtectedLocalStorage.SetAsync(_localStorageKey, null);
    }

    private string GetModalTitle()
    {
        if (GameBoard is null)
        {
            return string.Empty;
        }

        switch (GameBoard.GameStatus)
        {
            case GameStatus.GameOver:
                return "Better Luck Next Time!";

            case GameStatus.GameWon:
                return "Congrats!";

            case GameStatus.InProgress:
            default:
                return string.Empty;
        }
    }

    private string GetModalBody()
    {
        if (GameBoard is null)
        {
            return string.Empty;
        }

        switch (GameBoard.GameStatus)
        {
            case GameStatus.GameOver:
                return $"Rats! Looks like you couldn't make it to {GameBoard.Target}. Congrats on making it to {GameBoard.HighestNumber}.\n\nWanna play again?";

            case GameStatus.GameWon:
                return $"Way to go!! You made it to {GameBoard.Target}! Wanna keep going?";

            case GameStatus.InProgress:
            default:
                return string.Empty;
        }
    }

    private const string _localStorageKey = "2048localstorage";

    private static readonly Dictionary<int, string> BackgroundColors = new Dictionary<int, string>()
    {
        { 0,       "#1D1F20" },
        { 2,       "#0E4D64" },
        { 2 << 1,  "#137177" },
        { 2 << 2,  "#188977" },
        { 2 << 3,  "#1D9A6C" },
        { 2 << 4,  "#39A96B" },
        { 2 << 5,  "#56B870" },
        { 2 << 6,  "#74C67A" },
        { 2 << 7,  "#99D492" },
        { 2 << 8,  "#BFE1B0" },
        { 2 << 9,  "#DEEDCF" },
        { 2 << 10, "#1419A3" },
        { 2 << 11, "#1649A1" },
        { 2 << 12, "#19769E" },
        { 2 << 13, "#1B9C98" },
        { 2 << 14, "#1D9A6C" },
        { 2 << 15, "#209E35" },
        { 2 << 16, "#47A222" },
        { 2 << 17, "#86A625" },
        { 2 << 18, "#AA8E27" },
        { 2 << 19, "#AE552A" },
        { 2 << 20, "#B12D3F" },
        { 2 << 21, "#991E72" },
        { 2 << 22, "#6D1E99" },
    };

    private static readonly Dictionary<int, string> FontSize = new Dictionary<int, string>()
    {
        { 0,       "55px" },
        { 2,       "55px" },
        { 2 << 1,  "55px" },
        { 2 << 2,  "55px" },
        { 2 << 3,  "55px" },
        { 2 << 4,  "55px" },
        { 2 << 5,  "55px" },
        { 2 << 6,  "55px" },
        { 2 << 7,  "55px" },
        { 2 << 8,  "55px" },
        { 2 << 9,  "46px" },
        { 2 << 10, "46px" },
        { 2 << 11, "46px" },
        { 2 << 12, "46px" },
        { 2 << 13, "39px" },
        { 2 << 14, "39px" },
        { 2 << 15, "39px" },
        { 2 << 16, "31px" },
        { 2 << 17, "31px" },
        { 2 << 18, "31px" },
        { 2 << 19, "23px" },
        { 2 << 20, "23px" },
        { 2 << 21, "23px" },
        { 2 << 22, "23px" },
    };
}